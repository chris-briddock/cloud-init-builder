#cloud-config
hostname: k8s-worker-node-01
package_update: true
package_upgrade: true
timezone: UTC
packages:
  - libicu74
  - jq
  - gpg
  - curl
  - wget
  - git
  - apt-transport-https
  - ca-certificates
  - gnupg
  - lsb-release
  - libssl-dev
  - openssl
  - ubuntu-keyring
  - coreutils
  - conntrack
  - socat
users:
  - name: chris
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-rsa <ssh key here>
write_files:
  - path: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
  - path: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
  - path: /etc/systemd/system/kubelet.service
    content: |
      [Unit]
      Description=kubelet: The Kubernetes Node Agent
      Documentation=https://kubernetes.io/docs/home/
      Wants=network-online.target
      After=network-online.target

      [Service]
      ExecStart=/usr/local/bin/kubelet
      Restart=always
      StartLimitInterval=0
      RestartSec=10

      [Install]
      WantedBy=multi-user.target
  - path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    content: |
      # Note: This dropin only works with kubeadm and kubelet v1.11+
      [Service]
      Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
      Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
      # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
      EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
      # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
      # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
      EnvironmentFile=-/etc/default/kubelet
      ExecStart=
      ExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
runcmd:
  - MASTER_IP=172.16.16.70
  - TOKEN=audran.8320yej4rd5fcurm
  - HASH=63ce10d9a4c201544b4208ab30ab47e308f2ed6614d52ac8c380e17e560ed1ca
  - modprobe overlay
  - modprobe br_netfilter
  - sysctl --system
  - swapoff -a
  - sed -i '/swap/d' /etc/fstab
  # Install crictl
  - wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.31.1/crictl-v1.31.1-linux-amd64.tar.gz
  - tar zxvf crictl-v1.31.1-linux-amd64.tar.gz -C /usr/local/bin
  - rm -f crictl-v1.31.1-linux-amd64.tar.gz
  # Install docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io
  - systemctl enable docker
  - systemctl start docker
  - groupadd docker
  - usermod -aG docker chris
  - newgrp docker
  - systemctl enable docker.service
  - systemctl enable containerd.service
  - systemctl restart docker
  # Set up CRI for Docker
  - wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.14/cri-dockerd-0.3.14.amd64.tgz
  - tar xvf cri-dockerd-0.3.14.amd64.tgz
  - mv cri-dockerd/cri-dockerd /usr/local/bin/
  - wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service
  - wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
  - mv cri-docker.* /etc/systemd/system/
  - sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
  - systemctl daemon-reload
  - systemctl enable cri-docker.service
  - systemctl enable --now cri-docker.socket
  # Install runc and CNI plugins
  - wget https://github.com/opencontainers/runc/releases/download/v1.1.13/runc.amd64
  - install -m 755 runc.amd64 /usr/local/sbin/runc
  - wget https://github.com/containernetworking/plugins/releases/download/v1.5.1/cni-plugins-linux-amd64-v1.5.1.tgz
  - mkdir -p /opt/cni/bin
  - tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.5.1.tgz
  # Install Kubernetes components
  - mkdir -p /usr/local/bin
  - wget -O /usr/local/bin/kubeadm https://dl.k8s.io/v1.31.0/bin/linux/amd64/kubeadm
  - wget -O /usr/local/bin/kubectl https://dl.k8s.io/v1.31.0/bin/linux/amd64/kubectl
  - wget -O /usr/local/bin/kubelet https://dl.k8s.io/v1.31.0/bin/linux/amd64/kubelet
  - chmod +x /usr/local/bin/kube*
  # Enable and start kubelet service
  - systemctl daemon-reload
  - systemctl enable kubelet
  - systemctl start kubelet
  # Join the cluster
  - MAX_RETRIES=10
    RETRY_INTERVAL=30
    CONTROL_PLANE_IP="172.16.16.96"
      
      for i in $(seq 1 $MAX_RETRIES); do
        response=$(curl -s http://${CONTROL_PLANE_IP}:3000/join-info)
        if [ $? -eq 0 ]; then
          join_command=$(echo $response | jq -r .join_command)
          if [ ! -z "$join_command" ]; then
            echo "Joining cluster with command: $join_command"
            $join_command --cri-socket=unix:///var/run/cri-dockerd.sock
            exit 0
          fi
        fi
        echo "Failed to get join command, retrying in $RETRY_INTERVAL seconds..."
        sleep $RETRY_INTERVAL
      done
      echo "Failed to join cluster after $MAX_RETRIES attempts"
      exit 1
  - kubeadm join ${MASTER_IP}:6443 --token ${TOKEN} --discovery-token-ca-cert-hash sha256:${HASH} --cri-socket=unix:///var/run/cri-dockerd.sock
